export class BaseGame {
    constructor(gameId = 'default_game') {
        this.gameId = gameId; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä—ã ('missing_letter', 'word_match' –∏ —Ç.–¥.)
        this.bestScoreKey = `bestScore_${this.gameId}`; // –ö–ª—é—á –¥–ª—è localStorage
        this.currentScore = 0;
        this.maxPossibleScore = 0;
        this.startTime = null;
        this.gameDuration = 0;
        this.bestScore = parseInt(localStorage.getItem(this.bestScoreKey)) || 0;
        this.initializeGame();
    }

    initializeGame() {
        this.startTimer();
        this.calculateMaxPossibleScore();
        this.setupCommonEventListeners();
        // this.resetLevelsDisplay();
    }

    // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä
    startTimer() {
        this.startTime = new Date();
    }

    calculateMaxPossibleScore() {
        this.maxPossibleScore = document.querySelectorAll('.level').length * 10;
    }

    getGameDuration() {
        const endTime = new Date();
        this.gameDuration = Math.floor((endTime - this.startTime) / 1000);
        return this.formatTime(this.gameDuration);
    }

    formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins} –º–∏–Ω ${secs} —Å–µ–∫`;
    }

    setupCommonEventListeners() {
        document.querySelector('.restart-btn')?.addEventListener('click', () => this.restartGame());
        document.querySelector('.home-btn')?.addEventListener('click', () => this.goToHome());
    }

    proceedToNextLevel(currentLevel) {
        currentLevel.classList.remove('active');
        const nextLevel = currentLevel.nextElementSibling;

        if (nextLevel?.classList.contains('level')) {
            nextLevel.classList.add('active')
        } else {
            this.showFinalResults();
        }
    }

    async showFinalResults() {
        const duration = this.getGameDuration();
        const isNewRecord = this.currentScore > this.bestScore;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, "fruits" –∏–∑ "/games/image-card/fruits")
        const pathParts = window.location.pathname.split('/');
        const section = pathParts[pathParts.length - 1]; // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
        if (isNewRecord) {
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Laravel
                const response = await fetch('/api/save-score', {
                    method: 'POST',
                    credentials: 'include', // –í–∞–∂–Ω–æ!
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
                        'X-Requested-With': 'XMLHttpRequest' // –í–∞–∂–Ω–æ!
                    },
                    body: JSON.stringify({
                        score: this.currentScore,
                        game_type: this.gameId,
                        section: section
                    })
                });

                if (response.ok) {
                    // const data = await response.json();
                    this.bestScore = this.currentScore; // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–π —Å—á–µ—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    localStorage.setItem(this.bestScoreKey, this.currentScore);
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
                    localStorage.setItem(this.bestScoreKey, this.currentScore);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
                localStorage.setItem(this.bestScoreKey, this.currentScore);
            }
        } else {
            this.bestScore = localStorage.getItem(this.bestScoreKey);
        }

        document.getElementById('results').innerHTML = this.generateResultsHTML(duration, isNewRecord);
        document.getElementById('results').style.display = 'block';
        document.querySelector('.action-buttons').style.display = 'flex';
    }

    generateResultsHTML(duration, isNewRecord) {
        return `
            <h2 class="results-title">–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ</h2>
            <div class="result-item">
                <span class="result-label">–í—Ä–µ–º—è:</span>
                <span class="result-value">${duration}</span>
            </div>
            <div class="result-item">
                <span class="result-label">–û—á–∫–∏:</span>
                <span class="result-value">${this.currentScore} –∏–∑ ${this.maxPossibleScore}</span>
            </div>
            ${this.bestScore ? `
            <div class="result-item">
                <span class="result-label">${isNewRecord ? 'üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!' : '–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:'}</span>
                <span class="result-value">${this.bestScore}</span>
            </div>
            ` : ''}
            <div class="completion-message">–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</div>
        `;
    }

    restartGame() {
        window.location.reload(); // –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }

    goToHome() {
        window.location.href = "/games";
    }
}