class ImageCardGame {
    constructor() {
        this.currentScore = 0;
        this.maxPossibleScore = 0;
        this.startTime = null;
        this.gameDuration = 0;
        this.bestScore = localStorage.getItem('bestScore') || 0;
        this.initGame();
    }

    initGame() {
        this.setupEventListeners();
        this.resetLevelsDisplay();
        this.calculateMaxPossibleScore();
        this.startTimer();
    }

    startTimer() {
        this.startTime = new Date();
    }

    calculateMaxPossibleScore() {
        const levelsCount = document.querySelectorAll('.level').length;
        this.maxPossibleScore = levelsCount * 10; // 10 –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
    }

    getGameDuration() {
        const endTime = new Date();
        this.gameDuration = Math.floor((endTime - this.startTime) / 1000); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        return this.formatTime(this.gameDuration);
    }

    formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins} –º–∏–Ω ${secs} —Å–µ–∫`;
    }

    setupEventListeners() {
        document.querySelectorAll('.word-option').forEach(option => {
            option.addEventListener('click', (e) => this.handleAnswerSelection(e));
        });

        document.querySelector('.restart-btn').addEventListener('click', () => this.restartGame());
        document.querySelector('.home-btn').addEventListener('click', () => this.goToHome());
    }

    handleAnswerSelection(event) {
        const selectedOption = event.target;
        const isCorrect = selectedOption.dataset.correct === 'true';
        const currentLevel = selectedOption.closest('.level');
        const feedbackElement = currentLevel.querySelector('.feedback-message');

        if (isCorrect) {
            this.handleCorrectAnswer(selectedOption, currentLevel, feedbackElement);
        } else {
            this.handleIncorrectAnswer(selectedOption, feedbackElement);
        }
    }

    handleCorrectAnswer(selectedOption, currentLevel, feedbackElement) {
        selectedOption.classList.add('correct');
        this.disableAllOptions(currentLevel);
        this.currentScore += 10;

        feedbackElement.textContent = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ';
        feedbackElement.className = 'feedback-message correct-feedback';

        setTimeout(() => {
            this.proceedToNextLevel(currentLevel);
        }, 1000);
    }

    proceedToNextLevel(currentLevel) {
        currentLevel.style.display = 'none';
        const nextLevel = currentLevel.nextElementSibling;

        if (nextLevel && nextLevel.classList.contains('level')) {
            nextLevel.style.display = 'block';
        } else {
            this.showFinalResults();
        }
    }

    resetLevelsDisplay() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        document.querySelectorAll('.level').forEach((level, index) => {
            level.style.display = index === 0 ? 'block' : 'none';
        });
    }

    handleIncorrectAnswer(selectedOption, feedbackElement) {
        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        selectedOption.classList.add('incorrect');
        selectedOption.style.pointerEvents = 'none';

        // –®—Ç—Ä–∞—Ñ–Ω—ã–µ –æ—á–∫–∏
        this.currentScore = Math.max(0, this.currentScore - 2);

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        feedbackElement.textContent = '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! ‚ùå';
        feedbackElement.className = 'feedback-message incorrect-feedback';
    }

    disableAllOptions(level) {
        level.querySelectorAll('.word-option').forEach(option => {
            option.style.pointerEvents = 'none';
        });
    }

    showFinalResults() {
        const duration = this.getGameDuration();
        const isNewRecord = this.currentScore > this.bestScore;

        if (isNewRecord) {
            this.bestScore = this.currentScore;
            localStorage.setItem('bestScore', this.bestScore);
        }

        const resultsHTML = `
            <h2 class="results-title">–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω! üéâ</h2>
            <div class="result-item">
                <span class="result-label">–í—Ä–µ–º—è –∏–≥—Ä—ã:</span>
                <span class="result-value">${duration}</span>
            </div>
            <div class="result-item">
                <span class="result-label">–ù–∞–±—Ä–∞–Ω–æ –æ—á–∫–æ–≤:</span>
                <span class="result-value">${this.currentScore} –∏–∑ ${this.maxPossibleScore}</span>
            </div>
            ${this.bestScore ? `
            <div class="result-item">
                <span class="result-label">${isNewRecord ? 'üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!' : '–í–∞—à —Ä–µ–∫–æ—Ä–¥:'}</span>
                <span class="result-value">${this.bestScore}</span>
            </div>
            ` : ''}
            <div class="completion-message">–í—ã –º–æ–ª–æ–¥–µ—Ü! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!</div>
        `;

        document.getElementById('results').innerHTML = resultsHTML;
        document.getElementById('results').style.display = 'block';
        document.querySelector('.action-buttons').style.display = 'flex';
    }

    restartGame() {
        // –°–±—Ä–æ—Å —Å—á–µ—Ç–∞
        this.currentScore = 0;
        this.startTimer();

        // –°–∫—Ä—ã—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        document.getElementById('results').style.display = 'none';
        document.querySelector('.action-buttons').style.display = 'none';

        // –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω–µ–π
        document.querySelectorAll('.level').forEach((level, index) => {
            level.style.display = index === 0 ? 'block' : 'none';

            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
            level.querySelectorAll('.word-option').forEach(option => {
                option.classList.remove('correct', 'incorrect');
                option.style.pointerEvents = 'auto';
            });

            // –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            level.querySelector('.feedback-message').textContent = '';
            level.querySelector('.feedback-message').className = 'feedback-message';
        });
    }

    goToHome() {
        window.location.href = "{{ route('games.sections') }}";
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new ImageCardGame();
});